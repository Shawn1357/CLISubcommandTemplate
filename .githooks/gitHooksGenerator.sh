#!/bin/bash
#
# Script to generate the Git Repository Hooks to generate the
# static Java and other languages git repository state meta data.
#
# If the targeted hook file does not exist, it will be created in the .git/hooks directory
# If the targeted hook file does exist, it will be left alone.
#
# The targeted hook file is search for a section identified by the
# LCL_HOOK_START and LCL_HOOK_END variables.
# If that section does not exist, that section will be appended to the hook file.
#
# Each time this script is run, all commands within the section marked
# by LCL_HOOK_START and LCL_HOOK_END are purged. Any other commands are
# left intact.
#
# This script then inserts our standardized specific hook commands into the
# hook script.
#


HOOKS_TO_ENABLE="post-checkout post-commit post-merge post-rewrite post-update"
# HOOKS_TO_ENABLE="test-hook1 test-hook2"

THIS_PRG=$(realpath $0)
THIS_DIR=$(dirname "$THIS_PRG")
GIT_ROOT=$(git rev-parse --show-toplevel)
HOOK_DIR=$GIT_ROOT/.git/hooks

LCL_HOOK_START="### Custom Hook Start"
LCL_HOOK_END="### Custom Hook End"

# echo THIS_PRG:       $THIS_PRG
# echo THIS_DIR:       $THIS_DIR
# echo GIT_ROOT:       $GIT_ROOT
# echo HOOK_DIR:       $HOOK_DIR
# echo LCL_HOOK_START: $LCL_HOOK_START
# echo LCL_HOOK_END:   $LCL_HOOK_END

# echo HOOKS_TO_ENABLE: $HOOKS_TO_ENABLE


function insert_git_hook_commands()
{
local hk_nm=$1
local hk_fl=$2

cat << GITHOOK | sed -i "/^\s*#\s*$LCL_HOOK_START/ r /dev/stdin" $hk_fl

# This section is automatically generated.
# Do not change the contents of this section, they will be overwritten.
# Source of this section: $THIS_PRG
# Section was last automatically generated on: $(date +'%Y-%m-%d %H:%M:%S %z')


echo git- Executing hook: $hk_nm

GITHOOK_THIS_PRG=\$(realpath "\$0")
GITHOOK_THIS_DIR=\$(dirname "\${GITHOOK_THIS_PRG}")
GITHOOK_GIT_ROOT=\$(git rev-parse --show-toplevel)
GITHOOK_GIT_HOOKS_DIR="\${GITHOOK_GIT_ROOT}/.git/hooks"
GITHOOK_MNGD_HOOKS_DIR="\${GITHOOK_GIT_ROOT}/.githooks"

# echo GITHOOK_THIS_PRG:       \${GITHOOK_THIS_PRG}
# echo GITHOOK_THIS_DIR:       \${GITHOOK_THIS_DIR}
# echo GITHOOK_GIT_ROOT:       \${GITHOOK_GIT_ROOT}
# echo GITHOOK_GIT_HOOKS_DIR:  \${GITHOOK_GIT_HOOKS_DIR}
# echo GITHOOK_MNGD_HOOKS_DIR: \${GITHOOK_MNGD_HOOKS_DIR}


"\${GITHOOK_MNGD_HOOKS_DIR}/writeGITStatus.sh"

GITHOOK
}



function purge_old_hook_commands()
{
local hk_nm=$1
local hk_fl=$2

sed -i -n "1,/^\s*#\s*$LCL_HOOK_START/p;/^\s*#\s*$LCL_HOOK_END/,\$p" $hk_fl
}



function set_hook_boundaries()
{
local hk_nm=$1
local hk_fl=$2

if grep -Fq "$LCL_HOOK_START" "$hk_fl" ; then
    # Nothing to do...
    :
    
else
cat << MARKERS_EOF >> "$hk_fl"
# $LCL_HOOK_START
# Sample lines
# to be removed.
# $LCL_HOOK_END
MARKERS_EOF
fi
}


function ensure_hook_exists()
{
local hk_nm=$1
local hk_fl=$2

if [ ! -f "$HOOK_FILE" ]; then
#echo Generating new Hook Script for $hk_nm into $hk_fl
cat << EmptyHookFile > $hk_fl
#!/bin/bash
#
# Hook Script for Git Hook: $hk_nm
# Originally Generated by: $THIS_PRG
#
 
EmptyHookFile
chmod +x $hk_fl

fi
}


for HOOK_NAME in $HOOKS_TO_ENABLE; do
	echo HOOK Name: $HOOK_NAME
	# Create the Hook File if it doesn't exist
	HOOK_FILE=$HOOK_DIR/$HOOK_NAME
	ensure_hook_exists              $HOOK_NAME "$HOOK_FILE"
	set_hook_boundaries             $HOOK_NAME "$HOOK_FILE"
	purge_old_hook_commands         $HOOK_NAME "$HOOK_FILE"
	insert_git_hook_commands        $HOOK_NAME "$HOOK_FILE"
done



