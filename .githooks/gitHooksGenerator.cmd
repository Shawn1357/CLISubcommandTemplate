@echo off
rem
rem Script to generate the Git Repository Hooks to generate the
rem static Java and other languages git repository state meta data.
rem
rem If the targeted hook file does not exist, it will be created in the .git/hooks directory
rem If the targeted hook file does exist, it will be left alone.
rem
rem The targeted hook file is search for a section identified by the
rem LCL_HOOK_START and LCL_HOOK_END variables.
rem If that section does not exist, that section will be appended to the hook file.
rem
rem Each time this script is run, all commands within the section marked
rem by LCL_HOOK_START and LCL_HOOK_END are purged. Any other commands are
rem left intact.
rem
rem This script then inserts our Repository specific hook commands into the
rem hook script.
rem
rem

setlocal enableextensions enabledelayedexpansion

set YES=Y
set NO=N

set DEBUG_MODE=%NO%

set HOOKS_TO_ENABLE=post-checkout post-commit post-merge post-rewrite post-update
rem set HOOKS_TO_ENABLE=dummy1 dummy2

set WRITE_GIT_STATUS_SCRIPT=writeGITStatus.sh

set LCL_HOOK_START=### Custom Hook Start
set LCL_HOOK_END=### Custom Hook End


call :CurrentTimestamp CRNT_TS
call :AbsolutePath     THIS_PRG         "%~0"
call :DirName          THIS_DIR         "%THIS_PRG%"
call :GitROOTDir       GIT_ROOT
call :ToWindowsPath    GIT_WIN_ROOT     "%GIT_ROOT%"
call :GetROOTRelDir    GITHOOKS_REL_DIR "%THIS_DIR%"
call :ToLINUXPath      GITHOOKS_LNX_DIR "%GITHOOKS_REL_DIR%"
call :GetRelDirToROOT  REL_DIR_TO_ROOT  "%THIS_DIR%"
set                    HOOKS_REL_DIR=.git\hooks


if "%DEBUG_MODE%" == "%YES%" echo CRNT_TS:                   "%CRNT_TS%"
if "%DEBUG_MODE%" == "%YES%" echo THIS_PRG:                  "%THIS_PRG%"
if "%DEBUG_MODE%" == "%YES%" echo THIS_DIR:                  "%THIS_DIR%"
if "%DEBUG_MODE%" == "%YES%" echo GIT_ROOT:                  "%GIT_ROOT%"
if "%DEBUG_MODE%" == "%YES%" echo GIT_WIN_ROOT:              "%GIT_WIN_ROOT%"
if "%DEBUG_MODE%" == "%YES%" echo GITHOOKS_REL_DIR:          "%GITHOOKS_REL_DIR%"
if "%DEBUG_MODE%" == "%YES%" echo GITHOOKS_LNX_DIR:          "%GITHOOKS_LNX_DIR%"
if "%DEBUG_MODE%" == "%YES%" echo REL_DIR_TO_ROOT            "%REL_DIR_TO_ROOT%"
if "%DEBUG_MODE%" == "%YES%" echo HOOKS_REL_DIR:             "%HOOKS_REL_DIR%"

call :CallForEach  GenerateGitHook %HOOKS_TO_ENABLE%
goto :AllDone


rem
rem Call the supplied routine name for each of the supplied arguments.
rem
rem Arguments
rem    1 - The name of the subroutine to be called.
rem    2 - The argument to be supplied on the first call to the
rem        supplied subroutine name (Arg 1)
rem 3... - Subsequent arguments in individual calls to the supplied
rem        subroutine name (Arg 1).
rem
rem

:CallForEach
set SUB_NAME=%~1

:CallForEachLoopStart
set CRNT_ARG=%~2
if "%CRNT_ARG%" == "" goto :CallForEachLoopEnd

call :%SUB_NAME% "%CRNT_ARG%"

shift
goto :CallForEachLoopStart

:CallForEachLoopEnd
goto :eof


rem
rem Generate the Git Hook for the supplied Git Hook name.
rem
rem Arguments:
rem    1 - The name of the git hook to be generated.
rem
rem

:GenerateGitHook
set GIT_HOOK_TO_GEN=%~1
set HOOK_SCRIPT_FILE=%REL_DIR_TO_ROOT%\%HOOKS_REL_DIR%\%GIT_HOOK_TO_GEN%

echo Generating Git Hook:   "%GIT_HOOK_TO_GEN%"
if /I "%DEBUG_MODE%" == "%YES%" echo Git Hook Script File: %HOOK_SCRIPT_FILE% 

echo #^^!/bin/bash > "%HOOK_SCRIPT_FILE%"
echo #>> "%HOOK_SCRIPT_FILE%"
echo # Hook Script for Git Hook: %GIT_HOOK_TO_GEN%>> "%HOOK_SCRIPT_FILE%"
echo # Generated by: %THIS_PRG%>> "%HOOK_SCRIPT_FILE%"
echo # Generated on: %CRNT_TS%>> "%HOOK_SCRIPT_FILE%"
echo #>> "%HOOK_SCRIPT_FILE%"
echo.>> "%HOOK_SCRIPT_FILE%"
echo # %LCL_HOOK_START%>> "%HOOK_SCRIPT_FILE%"
echo # This section is automatically generated.>> "%HOOK_SCRIPT_FILE%"
echo # Do not change the contents of this section, they will be overwritten.>> "%HOOK_SCRIPT_FILE%"
echo # Source of this section: %THIS_PRG%>> "%HOOK_SCRIPT_FILE%"
echo # Section was last generated on: %CRNT_TS%>> "%HOOK_SCRIPT_FILE%"
echo.>> "%HOOK_SCRIPT_FILE%"
echo.>> "%HOOK_SCRIPT_FILE%"
echo echo Git Repository: Running git hook: %GIT_HOOK_TO_GEN%>> "%HOOK_SCRIPT_FILE%"
echo.>> "%HOOK_SCRIPT_FILE%"
echo REPO_THIS_PRG=$(realpath "$0")>> "%HOOK_SCRIPT_FILE%"
echo REPO_THIS_DIR=$(dirname "$REPO_THIS_PRG")>> "%HOOK_SCRIPT_FILE%"
echo REPO_GIT_ROOT=$(git rev-parse --show-toplevel)>> "%HOOK_SCRIPT_FILE%"
echo REPO_HOOK_DIR="$REPO_GIT_ROOT/.git/hooks">> "%HOOK_SCRIPT_FILE%"
echo REPO_MNGD_HKS="$REPO_GIT_ROOT/%GITHOOKS_LNX_DIR%">> "%HOOK_SCRIPT_FILE%"
echo.>> "%HOOK_SCRIPT_FILE%">> "%HOOK_SCRIPT_FILE%"
echo "$REPO_MNGD_HKS/%WRITE_GIT_STATUS_SCRIPT%">> "%HOOK_SCRIPT_FILE%"
echo.>> "%HOOK_SCRIPT_FILE%"
echo # %LCL_HOOK_END%>> "%HOOK_SCRIPT_FILE%"
echo.>> "%HOOK_SCRIPT_FILE%"

if /I "%DEBUG_MODE%" == "%YES%" echo Making script file "%HOOK_SCRIPT_FILE%" executable...
chmod ugoa+x "%HOOK_SCRIPT_FILE%"

goto :eof



rem
rem Find the relative dir from the Git ROOT directory to the
rem directory containing this script.
rem
rem Arguments
rem    1 - The environment variable name to assign the relative
rem        directory name from GIT_WIN_ROOT to the directory containing
rem        this script.
rem    2 - The directory name within the git repository whose root
rem        is pointed to by GIT_WIN_ROOT.
rem

:GetROOTRelDir
set CRNT_DIR=%~2
set REL_DIR=.

:GitROOTTryCrntDir
if /I "%CRNT_DIR%" == "%GIT_WIN_ROOT%\." goto :GitRootSetRelDir
if /I "%CRNT_DIR%" == "C:\."             goto :GitRootSetRelDir
if /I "%CRNT_DIR%" == "D:\."             goto :GitRootSetRelDir
if /I "%CRNT_DIR%" == "E:\."             goto :GitRootSetRelDir

call :LowestDirName LOW_DIR_NM "%CRNT_DIR%"
call :DirName       CRNT_DIR   "%CRNT_DIR%"
set REL_DIR=%LOW_DIR_NM%\%REL_DIR%

goto :GitROOTTryCrntDir

:GitRootSetRelDir
if "%REL_DIR%" == "" set REL_DIR=.
set %~1=%REL_DIR%
goto :eof



rem
rem Retrieve the relative directory path from the supplied directory
rem to the Git Repository directory pointed to by GIT_WIN_ROOT.
rem
rem Arguments
rem    1 - The name of the environment variable to set the relative path
rem        to root to.
rem    2 - The name of the directory, within the GIT_WIN_ROOT directory to
rem        find the relative path to.
rem

:GetRelDirToROOT
set CRNT_DIR=%~2
set REL_DIR=.

:GitRelDirTryCrnt
if /I "%CRNT_DIR%" == "%GIT_WIN_ROOT%\." goto :GitRelDirSetCrnt
if /I "%CRNT_DIR%" == "C:\."             goto :GitRelDirSetCrnt
if /I "%CRNT_DIR%" == "D:\."             goto :GitRelDirSetCrnt
if /I "%CRNT_DIR%" == "E:\."             goto :GitRelDirSetCrnt

call :DirName CRNT_DIR  "%CRNT_DIR%"
set REL_DIR=..\%REL_DIR%

goto :GitRelDirTryCrnt

:GitRelDirSetCrnt
set %~1=%REL_DIR%
goto :eof



rem
rem Convert a path name into an absolute path name and assign to
rem the supplied environment variable name.
rem
rem Arguments:
rem    1 - The name of the environment variable to set.
rem    2 - The path (absolute or relative) to convert into an absolute
rem        path name.  May refer to a file (exists or not) or a directory.
rem
rem

:AbsolutePath
set %~1=%~f2
goto :eof



rem
rem Extract the lowest directory name from the supplied path.
rem
rem Arguments
rem    1 - The environment variable name to be assigned to the lowest
rem        level directory of the supplied path.
rem    2 - The directory name to extract the lowest level directory
rem        from.  This function assumes this argument points to a directory.
rem
rem

:LowestDirName
set %~1=%~nx2
goto :eof


rem
rem Extract the parent directory name from the supplied path name to either
rem a directory or a file (exists or not).
rem
rem Arguments:
rem    1 - The name of the environment variable to set.
rem    2 - The path (absolute or relative) to extract the directory name
rem        from.
rem
rem

:DirName
set %~1=%~dp2.
goto :eof


rem
rem Extract the top-level directory name for the current Git repository and
rem assign it to the supplied environment variable name.
rem
rem Arguments:
rem    1 - The name of the environment vairable to receive the current
rem        git repository root directory.
rem

:GitROOTDir
for /F "usebackq tokens=*" %%i in (`git rev-parse --show-toplevel`) do set %~1=%%~i
goto :eof


rem
rem Convert a path name from Windows style (with backslashes for directory
rem separators) to LINUX style (with forward slashes for directory
rem separators).
rem
rem Arguments
rem    1 - Name of the environment variable to receive the converted
rem        path name.
rem    2 - The Path to be converted to LINUX style.  May be a relative
rem        or absolute path name.
rem
rem

:ToLINUXPath
set PATH_TO_CONV=%~2
set %~1=%PATH_TO_CONV:\=/%
goto :eof


rem
rem Convert a path name from LINUX style (with forward slashes for
rem directory separators) to Windows style (with back slashes for
rem separators).
rem
rem If the supplied directory name is absolute, *and* it is a single
rem letter directory name, assume it to be a windows drive letter.
rem This is the case, for instance, in an MSYS2 environment.
rem eg:
rem   /c/Temp   should be converted to   c:\Temp
rem
rem Arguments
rem    1 - Name of the environment variable to receive the converted
rem        path name.
rem    2 - The Path to be converted to Windows style.  May be a relative
rem        or absolute path name.
rem
rem

:ToWindowsPath
set PATH_TO_CONV=%~2
set PATH_FIRST_CHAR=%PATH_TO_CONV:~0,1%
set PATH_SECND_CHAR=%PATH_TO_CONV:~1,1%
set PATH_THIRD_CHAR=%PATH_TO_CONV:~2,1%
set PATH_THIRD_ON=%PATH_TO_CONV:~2%

rem if "%DEBUG_MODE%" == "%YES%" echo PATH_TO_CONV:    "%PATH_TO_CONV%"

if not "%PATH_FIRST_CHAR%" == "/" goto :ContinueAbsWinPath
if not "%PATH_THIRD_CHAR%" == "/" goto :ContinueAbsWinPath

rem call :ToUppercase PATH_SECND_CHAR "%PATH_SECND_CHAR%"
set PATH_TO_CONV=%PATH_SECND_CHAR%:%PATH_THIRD_ON%

:ContinueAbsWinPath
rem if "%DEBUG_MODE%" == "%YES%" echo PATH_FIRST_CHAR: "%PATH_FIRST_CHAR%"
rem if "%DEBUG_MODE%" == "%YES%" echo PATH_SECND_CHAR: "%PATH_SECND_CHAR%"
rem if "%DEBUG_MODE%" == "%YES%" echo PATH_THIRD_CHAR: "%PATH_THIRD_CHAR%"
rem if "%DEBUG_MODE%" == "%YES%" echo PATH_THIRD_ON:   "%PATH_THIRD_ON%"
rem if "%DEBUG_MODE%" == "%YES%" echo PATH_TO_CONV:    "%PATH_TO_CONV%"

set %~1=%PATH_TO_CONV:/=\%
goto :eof


rem
rem Generate the current timestamp into the supplied environment variable.
rem
rem The timestamp format is whatever the DATE and TIME commands return.
rem
rem Arguments
rem    1 - The name of the environment variable to receive the Timestamp.
rem
rem

:CurrentTimestamp
for /F "usebackq tokens=*" %%i in (`date /T`) do set DATE_STR=%%i
for /F "usebackq tokens=*" %%i in (`time /T`) do set TIME_STR=%%i

set %~1=%DATE_STR% %TIME_STR%
goto :eof



rem
rem Convert the supplied value to an upper- or lower-case value and 
rem associate it with the supplied environment variable name.
rem
rem Arguments
rem    1 - The name of the environment variable to receive the uppercase
rem        version of the string.
rem
rem    2 - The string to be converted to uppercase.
rem
rem

:ToUppercase
if "%1" == "" goto :eof

set str4upr=%~2
for %%c in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) do set str4upr=!str4upr:%%c=%%c!
set %1=%str4upr%

goto :eof




rem
rem Clean up and exit
rem
rem

:AllDone
endlocal


